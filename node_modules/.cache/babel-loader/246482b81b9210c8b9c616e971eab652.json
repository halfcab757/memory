{"ast":null,"code":"import _objectSpread from\"C:/Users/Martin/R_2021/memory/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/Martin/R_2021/memory/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,Suspense}from'react';import Start from'./pages/Start/Start';import Navigation from'./components/Layout/Navigation/Navigation';import{rockCards,metalCards,popCards}from'./data/Cards';import'./App.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Memory=/*#__PURE__*/React.lazy(function(){return import('./pages/Memory/Memory');});var Final=/*#__PURE__*/React.lazy(function(){return import('./pages/Final/Final');});var About=/*#__PURE__*/React.lazy(function(){return import('./pages/About/About');});function App(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),started=_useState2[0],setStarted=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),isOver=_useState4[0],setIsOver=_useState4[1];var _useState5=useState(3),_useState6=_slicedToArray(_useState5,2),counter=_useState6[0],setCounter=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),mode=_useState8[0],setMode=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),showAbout=_useState10[0],setShowAbout=_useState10[1];var _useState11=useState(),_useState12=_slicedToArray(_useState11,2),memoryCards=_useState12[0],setMemoryCards=_useState12[1];var _useState13=useState(true),_useState14=_slicedToArray(_useState13,2),showWelcome=_useState14[0],setShowWelcome=_useState14[1];function closeWelcomeHandler(){setShowWelcome(false);}function shuffle(array){var n=array.length-1;for(var i=n;i>0;i--){var j=Math.floor(Math.random()*i);var temp=array[i];array[i]=array[j];array[j]=temp;}return array;}function reset(){setStarted(false);setIsOver(false);setCounter(0);setMode();setMemoryCards(null);}function startGameHandler(style){var cards;if(style==='ROCK'){cards=rockCards.map(function(card){return _objectSpread(_objectSpread({},card),{},{revealed:false});});}if(style==='METAL'){cards=metalCards.map(function(card){return _objectSpread(_objectSpread({},card),{},{revealed:false});});}if(style==='POP'){cards=popCards.map(function(card){return _objectSpread(_objectSpread({},card),{},{revealed:false});});}setMemoryCards(shuffle(cards));setIsOver(false);setStarted(true);}function finishGame(){setIsOver(true);}function increaseCounter(){setCounter(function(prevCounter){return prevCounter+1;});}function selectModeHandler(mode){setMode(mode);}function toggleShowAboutHandler(){setShowAbout(function(prevState){return!prevState;});}function closeAboutAndResetHandler(){setShowAbout(false);reset();}return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(Navigation,{count:counter,activeMode:mode,onSelectMode:selectModeHandler,onShowAbout:toggleShowAboutHandler,onShowStart:closeAboutAndResetHandler}),/*#__PURE__*/_jsxs(Suspense,{fallback:/*#__PURE__*/_jsx(\"p\",{style:{textAlign:'center'},children:\"Loading\"}),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[!started&&!showAbout&&/*#__PURE__*/_jsx(Start,{onStart:startGameHandler,showWelcome:showWelcome,closeWelcome:closeWelcomeHandler}),started&&!isOver&&/*#__PURE__*/_jsx(Memory,{show:!showAbout,cards:memoryCards,increaseCount:increaseCounter,onFinish:finishGame,isOver:isOver,count:counter}),/*#__PURE__*/_jsx(Final,{show:isOver&&!showAbout,onStart:startGameHandler,counter:counter})]}),showAbout&&/*#__PURE__*/_jsx(About,{gameIsRunning:started,onCloseAbout:toggleShowAboutHandler,onCloseAboutAndReset:closeAboutAndResetHandler})]})]});}export default App;","map":{"version":3,"sources":["C:/Users/Martin/R_2021/memory/src/App.js"],"names":["React","useState","Suspense","Start","Navigation","rockCards","metalCards","popCards","Memory","lazy","Final","About","App","started","setStarted","isOver","setIsOver","counter","setCounter","mode","setMode","showAbout","setShowAbout","memoryCards","setMemoryCards","showWelcome","setShowWelcome","closeWelcomeHandler","shuffle","array","n","length","i","j","Math","floor","random","temp","reset","startGameHandler","style","cards","map","card","revealed","finishGame","increaseCounter","prevCounter","selectModeHandler","toggleShowAboutHandler","prevState","closeAboutAndResetHandler","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, Suspense } from 'react';\n\nimport Start from './pages/Start/Start';\nimport Navigation from './components/Layout/Navigation/Navigation';\n\nimport { rockCards, metalCards, popCards } from './data/Cards';\n\nimport './App.css';\n\nconst Memory = React.lazy(() => import('./pages/Memory/Memory'));\nconst Final = React.lazy(() => import('./pages/Final/Final'));\nconst About = React.lazy(() => import('./pages/About/About'));\n\nfunction App() {\n  const [started, setStarted] = useState();\n  const [isOver, setIsOver] = useState();\n  const [counter, setCounter] = useState(3);\n  const [mode, setMode] = useState();\n  const [showAbout, setShowAbout] = useState(false);\n  const [memoryCards, setMemoryCards] = useState();\n  const [showWelcome, setShowWelcome] = useState(true);\n\n  function closeWelcomeHandler() {\n    setShowWelcome(false);\n}\n\n  function shuffle(array) {\n    let n = array.length - 1;\n    for (let i = n; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  function reset() {\n    setStarted(false);\n    setIsOver(false);\n    setCounter(0);\n    setMode();\n    setMemoryCards(null);\n  }\n\n  function startGameHandler(style) {\n    let cards;\n    if (style === 'ROCK') {\n      cards = rockCards.map((card) => {\n        return {\n          ...card,\n          revealed: false,\n        };\n      });\n    }\n    if (style === 'METAL') {\n      cards = metalCards.map((card) => {\n        return {\n          ...card,\n          revealed: false,\n        };\n      });\n    }\n    if (style === 'POP') {\n      cards = popCards.map((card) => {\n        return {\n          ...card,\n          revealed: false,\n        };\n      });\n    }\n    setMemoryCards(shuffle(cards));\n    setIsOver(false);\n    setStarted(true);\n  }\n\n  function finishGame() {\n    setIsOver(true);\n  }\n\n  function increaseCounter() {\n    setCounter((prevCounter) => prevCounter + 1);\n  }\n\n  function selectModeHandler(mode) {\n    setMode(mode);\n  }\n\n  function toggleShowAboutHandler() {\n    setShowAbout(prevState => !prevState);\n  }\n\n  function closeAboutAndResetHandler() {\n    setShowAbout(false);\n    reset();\n  }\n\n  return (\n    <React.Fragment>\n      <Navigation\n        count={counter}\n        activeMode={mode}\n        onSelectMode={selectModeHandler}\n        onShowAbout={toggleShowAboutHandler}\n        onShowStart={closeAboutAndResetHandler}\n      />\n      <Suspense fallback={<p style={{textAlign: 'center'}}>Loading</p>}>\n      <div className=\"App\">\n        {!started && !showAbout && <Start onStart={startGameHandler} showWelcome={showWelcome} closeWelcome={closeWelcomeHandler}/>}\n        {started && !isOver && (\n          <Memory\n            show={!showAbout}\n            cards={memoryCards}\n            increaseCount={increaseCounter}\n            onFinish={finishGame}\n            isOver={isOver}\n            count={counter}\n          />\n        )}\n        <Final\n          show={isOver && !showAbout}\n          onStart={startGameHandler}\n          counter={counter}\n        />\n      </div>\n      {showAbout && (\n        <About\n          gameIsRunning={started}\n          onCloseAbout={toggleShowAboutHandler}\n          onCloseAboutAndReset={closeAboutAndResetHandler}\n        />\n      )}\n      </Suspense>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}