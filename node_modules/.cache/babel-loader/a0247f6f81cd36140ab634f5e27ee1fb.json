{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Martin\\\\R_2021\\\\memory\\\\src\\\\components\\\\MemoryCards\\\\MemoryCards.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport MemoryCard from '../MemoryCard/MemoryCard';\nimport classes from './MemoryCards.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst memoryCards = [{\n  id: 1,\n  pairId: 'A',\n  title: 'A',\n  revealed: false,\n  pairFound: false\n}, {\n  id: 2,\n  pairId: 'A',\n  title: 'A',\n  revealed: false,\n  pairFound: false\n}, {\n  id: 3,\n  pairId: 'B',\n  title: 'B',\n  revealed: false,\n  pairFound: false\n}, {\n  id: 4,\n  pairId: 'B',\n  title: 'B',\n  revealed: false,\n  pairFound: false\n}, {\n  id: 5,\n  pairId: 'C',\n  title: 'C',\n  revealed: false,\n  pairFound: false\n}, {\n  id: 6,\n  pairId: 'C',\n  title: 'C',\n  revealed: false,\n  pairFound: false\n}, {\n  id: 7,\n  pairId: 'D',\n  title: 'D',\n  revealed: false,\n  pairFound: false\n}, {\n  id: 8,\n  pairId: 'D',\n  title: 'D',\n  revealed: false,\n  pairFound: false\n}, {\n  id: 9,\n  pairId: 'E',\n  title: 'E',\n  revealed: false,\n  pairFound: false\n}, {\n  id: 10,\n  pairId: 'E',\n  title: 'E',\n  revealed: false,\n  pairFound: false\n}, {\n  id: 11,\n  pairId: 'F',\n  title: 'F',\n  revealed: false,\n  pairFound: false\n}, {\n  id: 12,\n  pairId: 'F',\n  title: 'F',\n  revealed: false,\n  pairFound: false\n}];\n\nfunction shuffle(array) {\n  let n = array.length - 1;\n\n  for (let i = n; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nconst MemoryCards = () => {\n  _s();\n\n  const [cards, setCards] = useState(shuffle(memoryCards));\n  const [counter, setCounter] = useState(0);\n  const [revealedCards, setRevealedCards] = useState(0);\n\n  function switchOneCard() {\n    const newArrangedCards = cards;\n    let randomIndexOne = Math.floor(Math.random() * 11);\n    let randomIndexTwo = Math.floor(Math.random() * 11);\n\n    if (randomIndexOne === randomIndexTwo || newArrangedCards[randomIndexOne].title === newArrangedCards[randomIndexTwo].title) {\n      randomIndexTwo = Math.floor(Math.random() * 11);\n    }\n\n    const changedCard = newArrangedCards.splice(randomIndexOne, 1);\n    newArrangedCards.splice(randomIndexTwo, 0, changedCard[0]);\n    setCards(newArrangedCards);\n  }\n\n  const cardCover = () => {\n    const updatedCards = cards.map(card => {\n      return { ...card,\n        revealed: card.pairFound\n      };\n    });\n    setCards(updatedCards);\n    setRevealedCards(0);\n  };\n\n  const cardClickHandler = cardId => {\n    if (revealedCards >= 2) {\n      return;\n    }\n\n    setRevealedCards(prevRevealedCards => prevRevealedCards + 1);\n    const selectedCardIndex = cards.findIndex(card => card.id === cardId);\n    const selectedCard = cards[selectedCardIndex];\n    selectedCard.revealed = true;\n    const updatedCards = [...cards];\n    updatedCards[selectedCardIndex] = selectedCard;\n    setCards(updatedCards);\n    setCounter(prevCounter => prevCounter + 1);\n    console.log(revealedCards); // checking both revealed cards for pairing\n\n    if (revealedCards === 1) {\n      const visibleCards = updatedCards.filter(card => card.revealed && !card.pairFound);\n      console.log('visible cards:', visibleCards);\n\n      if (visibleCards[0].pairId === visibleCards[1].pairId) {\n        for (const card of visibleCards) {\n          card.pairFound = true;\n        }\n\n        setRevealedCards(0);\n\n        if (updatedCards.filter(card => !card.pairFound).length === 0) {\n          return alert('You made it. You won. Game is over.');\n        }\n\n        return alert('It is a match.');\n      }\n    }\n\n    if (revealedCards === 1) {\n      // checking if all pairs are found\n      console.log('setting timeout');\n      setTimeout(() => {\n        cardCover();\n      }, 1000);\n    }\n  };\n\n  const renderedCards = cards.map(card => {\n    return /*#__PURE__*/_jsxDEV(MemoryCard, {\n      card: card,\n      clickHandler: cardClickHandler,\n      enabled: !revealedCards >= 2\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: switchOneCard,\n      children: \"Re-arrange\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.MemoryCards,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), renderedCards]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MemoryCards, \"Vz2sq3MJ06u757ev9dzRViOOXwQ=\");\n\n_c = MemoryCards;\nexport default MemoryCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryCards\");","map":{"version":3,"sources":["C:/Users/Martin/R_2021/memory/src/components/MemoryCards/MemoryCards.js"],"names":["useState","MemoryCard","classes","memoryCards","id","pairId","title","revealed","pairFound","shuffle","array","n","length","i","j","Math","floor","random","temp","MemoryCards","cards","setCards","counter","setCounter","revealedCards","setRevealedCards","switchOneCard","newArrangedCards","randomIndexOne","randomIndexTwo","changedCard","splice","cardCover","updatedCards","map","card","cardClickHandler","cardId","prevRevealedCards","selectedCardIndex","findIndex","selectedCard","prevCounter","console","log","visibleCards","filter","alert","setTimeout","renderedCards"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\n\r\nimport MemoryCard from '../MemoryCard/MemoryCard';\r\n\r\nimport classes from './MemoryCards.module.css';\r\n\r\nconst memoryCards = [\r\n    {\r\n        id: 1,\r\n        pairId: 'A',\r\n        title: 'A',\r\n        revealed: false,\r\n        pairFound: false\r\n    },\r\n    {\r\n        id: 2,\r\n        pairId: 'A',\r\n        title: 'A',\r\n        revealed: false,\r\n        pairFound: false\r\n    },\r\n    {\r\n        id: 3,\r\n        pairId: 'B',\r\n        title: 'B',\r\n        revealed: false,\r\n        pairFound: false\r\n    },\r\n    {\r\n        id: 4,\r\n        pairId: 'B',\r\n        title: 'B',\r\n        revealed: false,\r\n        pairFound: false\r\n    },\r\n    {\r\n        id: 5,\r\n        pairId: 'C',\r\n        title: 'C',\r\n        revealed: false,\r\n        pairFound: false\r\n    },\r\n    {\r\n        id: 6,\r\n        pairId: 'C',\r\n        title: 'C',\r\n        revealed: false,\r\n        pairFound: false\r\n    },\r\n    {\r\n        id: 7,\r\n        pairId: 'D',\r\n        title: 'D',\r\n        revealed: false,\r\n        pairFound: false\r\n    },\r\n    {\r\n        id: 8,\r\n        pairId: 'D',\r\n        title: 'D',\r\n        revealed: false,\r\n        pairFound: false\r\n    },\r\n    {\r\n        id: 9,\r\n        pairId: 'E',\r\n        title: 'E',\r\n        revealed: false,\r\n        pairFound: false\r\n    },\r\n    {\r\n        id: 10,\r\n        pairId: 'E',\r\n        title: 'E',\r\n        revealed: false,\r\n        pairFound: false\r\n    },\r\n    {\r\n        id: 11,\r\n        pairId: 'F',\r\n        title: 'F',\r\n        revealed: false,\r\n        pairFound: false\r\n    },\r\n    {\r\n        id: 12,\r\n        pairId: 'F',\r\n        title: 'F',\r\n        revealed: false,\r\n        pairFound: false\r\n    }\r\n];\r\n\r\nfunction shuffle(array) {\r\n    let n = array.length -1;\r\n    for(let i = n; i > 0; i--){\r\n        const j = Math.floor(Math.random() * i)\r\n        const temp = array[i]\r\n        array[i] = array[j]\r\n        array[j] = temp;\r\n      }\r\n    return array;\r\n}\r\n\r\nconst MemoryCards = () => {\r\n\r\n    const [cards, setCards] = useState(shuffle(memoryCards));\r\n    const [counter, setCounter] = useState(0);\r\n    const [revealedCards, setRevealedCards] = useState(0);\r\n\r\n    function switchOneCard() {\r\n        const newArrangedCards = cards;\r\n        let randomIndexOne = Math.floor((Math.random() * 11));\r\n        let randomIndexTwo = Math.floor((Math.random() * 11));\r\n        if(randomIndexOne === randomIndexTwo\r\n            || newArrangedCards[randomIndexOne].title === newArrangedCards[randomIndexTwo].title) {\r\n                randomIndexTwo = Math.floor(Math.random() * 11);\r\n            }\r\n        const changedCard = newArrangedCards.splice(randomIndexOne, 1);\r\n        newArrangedCards.splice(randomIndexTwo, 0, changedCard[0]);\r\n        setCards(newArrangedCards);\r\n    \r\n    }\r\n\r\n    const cardCover = () => {\r\n        const updatedCards = cards\r\n            .map(card => {\r\n                return {\r\n                    ...card,\r\n                    revealed: card.pairFound\r\n                }\r\n            });\r\n        setCards(updatedCards);\r\n        setRevealedCards(0);\r\n    }\r\n\r\n    const cardClickHandler = (cardId) => {\r\n        if(revealedCards >= 2) {\r\n            return;\r\n        }\r\n        setRevealedCards(prevRevealedCards => prevRevealedCards + 1);\r\n        const selectedCardIndex = cards.findIndex(card => card.id === cardId);\r\n        const selectedCard = cards[selectedCardIndex];\r\n        selectedCard.revealed = true;\r\n        const updatedCards = [...cards];\r\n        updatedCards[selectedCardIndex] = selectedCard;\r\n        setCards(updatedCards);\r\n        \r\n        setCounter(prevCounter => prevCounter + 1);\r\n        console.log(revealedCards);\r\n\r\n        // checking both revealed cards for pairing\r\n\r\n        if(revealedCards === 1) {\r\n            const visibleCards = updatedCards.filter(card => card.revealed && !card.pairFound);\r\n            console.log('visible cards:', visibleCards);\r\n            if(visibleCards[0].pairId === visibleCards[1].pairId) {\r\n                for(const card of visibleCards) {\r\n                    card.pairFound = true;\r\n                }\r\n                setRevealedCards(0);\r\n                if(updatedCards.filter(card => !card.pairFound).length === 0) {\r\n                    return alert('You made it. You won. Game is over.');\r\n                }\r\n                return alert('It is a match.');\r\n            }\r\n        }\r\n\r\n        if(revealedCards === 1) {\r\n            // checking if all pairs are found\r\n            console.log('setting timeout');\r\n            setTimeout(() => {\r\n                cardCover();\r\n                }, 1000);\r\n            }\r\n        }\r\n\r\n    const renderedCards = cards.map(card => {\r\n        return <MemoryCard \r\n            card={card} \r\n            key={card.id}\r\n            clickHandler={cardClickHandler}\r\n            enabled={!revealedCards >= 2}\r\n            />;\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                onClick={switchOneCard}>Re-arrange</button>\r\n            <div className={classes.MemoryCards}>\r\n                <div></div>\r\n                {renderedCards}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MemoryCards;"]},"metadata":{},"sourceType":"module"}