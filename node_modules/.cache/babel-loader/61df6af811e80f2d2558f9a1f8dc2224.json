{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Martin\\\\R_2021\\\\memory\\\\src\\\\pages\\\\Memory\\\\Memory.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MemoryCard from '../../components/MemoryCard/MemoryCard';\nimport Backdrop from '../../components/Backdrop/Backdrop';\nimport OpenCard from '../../components/OpenCard/OpenCard';\nimport NoMatchCard from '../../components/NoMatchCard/NoMatchCard';\nimport classes from './Memory.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Memory = props => {\n  _s();\n\n  const [cards, setCards] = useState(props.cards);\n  const [revealedCards, setRevealedCards] = useState(0);\n  const [isMatch, setIsMatch] = useState();\n  const [focusedCard, setFocusedCard] = useState();\n  const [showBackdrop, setShowBackdrop] = useState();\n  const [isNoMatch, setIsNoMatch] = useState(); // const { isOver, finish } = props;\n\n  let allPairsFound = cards.filter(card => !card.pairFound).length === 0;\n  useEffect(() => {}, [cards]);\n  const cardCover = useCallback(() => {\n    setRevealedCards(0);\n    const updatedCards = cards.map(card => {\n      return { ...card,\n        revealed: card.pairFound\n      };\n    });\n    setCards(updatedCards);\n  }, [cards, setCards, setRevealedCards]);\n  useEffect(() => {\n    return cardCover();\n  }, []);\n  const validateAllCardsRevealed = useCallback(() => {\n    const pairsNotFound = cards.filter(card => !card.pairfound);\n    return pairsNotFound.length === 0;\n  }, [cards]);\n  const blurCard = useCallback(() => {\n    setIsMatch(false);\n    setIsNoMatch(false);\n    setTimeout(() => {\n      setShowBackdrop(false);\n      setFocusedCard(null);\n    }, 500);\n    setTimeout(() => {\n      cardCover();\n    }, 400);\n    const allCardsRevealed = validateAllCardsRevealed();\n\n    if (allCardsRevealed) {\n      return props.onFinish();\n    }\n  }, [setIsMatch, setShowBackdrop, setFocusedCard, cardCover, props, validateAllCardsRevealed]);\n\n  const validateCardClick = cardId => {\n    if (focusedCard && focusedCard.id === cardId) {\n      return false;\n    }\n\n    if (revealedCards >= 2) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const showFeedback = cardsMatch => {\n    if (cardsMatch) {\n      setTimeout(() => {\n        setRevealedCards(0);\n        setShowBackdrop(true);\n        return setIsMatch(true);\n      }, 1000);\n    }\n\n    if (!cardsMatch) {\n      setTimeout(() => {\n        setIsNoMatch(true);\n        setShowBackdrop(true);\n      }, 1400);\n    }\n  };\n\n  const checkForMatch = cards => {\n    if (revealedCards === 0) {\n      return;\n    }\n\n    if (revealedCards === 1) {\n      const visibleCards = cards.filter(card => card.revealed && !card.pairFound);\n      const cardsMatch = visibleCards[0].pairId === visibleCards[1].pairId;\n\n      if (cardsMatch) {\n        for (const card of visibleCards) {\n          card.pairFound = true;\n        }\n      }\n\n      showFeedback(cardsMatch);\n    }\n  };\n\n  const updateCards = clickedCardId => {\n    const updatedCards = [...cards];\n    const selectedCardIndex = updatedCards.findIndex(card => card.id === clickedCardId);\n    const selectedCard = updatedCards[selectedCardIndex];\n    selectedCard.revealed = true;\n    updatedCards[selectedCardIndex] = selectedCard;\n    return updatedCards;\n  };\n\n  const cardClickHandler = cardId => {\n    console.log('I run - memory page');\n    const isValidCardClick = validateCardClick(cardId);\n\n    if (!isValidCardClick) {\n      return;\n    }\n\n    setRevealedCards(prevRevealedCards => prevRevealedCards + 1);\n    props.increaseCount();\n    setFocusedCard(cards.find(card => card.id === cardId));\n    const updatedCards = updateCards(cardId);\n    setCards(updatedCards);\n    checkForMatch(updatedCards);\n  };\n\n  const renderedCards = cards.map(card => {\n    return /*#__PURE__*/_jsxDEV(MemoryCard, {\n      card: card,\n      clickHandler: cardClickHandler,\n      disabled: revealedCards >= 2,\n      cards: cards\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  });\n\n  if (!props.show) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.memorycards,\n    children: [!props.isOver && renderedCards, /*#__PURE__*/_jsxDEV(Backdrop, {\n      show: showBackdrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OpenCard, {\n      show: isMatch,\n      card: focusedCard,\n      cardsMatch: isMatch,\n      onClose: blurCard,\n      allPairsFound: allPairsFound\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), isNoMatch && /*#__PURE__*/_jsxDEV(NoMatchCard, {\n      onClose: blurCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Memory, \"AJp2HSOcYcouRtzbeiE1Bl8DYK8=\");\n\n_c = Memory;\nexport default Memory;\n\nvar _c;\n\n$RefreshReg$(_c, \"Memory\");","map":{"version":3,"sources":["C:/Users/Martin/R_2021/memory/src/pages/Memory/Memory.js"],"names":["React","useState","useEffect","useCallback","MemoryCard","Backdrop","OpenCard","NoMatchCard","classes","Memory","props","cards","setCards","revealedCards","setRevealedCards","isMatch","setIsMatch","focusedCard","setFocusedCard","showBackdrop","setShowBackdrop","isNoMatch","setIsNoMatch","allPairsFound","filter","card","pairFound","length","cardCover","updatedCards","map","revealed","validateAllCardsRevealed","pairsNotFound","pairfound","blurCard","setTimeout","allCardsRevealed","onFinish","validateCardClick","cardId","id","showFeedback","cardsMatch","checkForMatch","visibleCards","pairId","updateCards","clickedCardId","selectedCardIndex","findIndex","selectedCard","cardClickHandler","console","log","isValidCardClick","prevRevealedCards","increaseCount","find","renderedCards","show","memorycards","isOver"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AAEA,OAAOC,UAAP,MAAuB,wCAAvB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AAEA,OAAOC,OAAP,MAAoB,qBAApB;;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACS,KAAK,CAACC,KAAP,CAAlC;AACA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,EAAtC;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,EAA9C;AACA,QAAM,CAACkB,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,EAAhD;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,EAA1C,CANwB,CAQxB;;AAEA,MAAIsB,aAAa,GAAGZ,KAAK,CAACa,MAAN,CAAcC,IAAD,IAAU,CAACA,IAAI,CAACC,SAA7B,EAAwCC,MAAxC,KAAmD,CAAvE;AAEAzB,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,EAAW,CAACS,KAAD,CAAX,CAAT;AAEA,QAAMiB,SAAS,GAAGzB,WAAW,CAAC,MAAM;AAClCW,IAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACA,UAAMe,YAAY,GAAGlB,KAAK,CAACmB,GAAN,CAAWL,IAAD,IAAU;AACvC,aAAO,EACL,GAAGA,IADE;AAELM,QAAAA,QAAQ,EAAEN,IAAI,CAACC;AAFV,OAAP;AAID,KALoB,CAArB;AAMAd,IAAAA,QAAQ,CAACiB,YAAD,CAAR;AACD,GAT4B,EAS1B,CAAClB,KAAD,EAAQC,QAAR,EAAkBE,gBAAlB,CAT0B,CAA7B;AAWAZ,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO0B,SAAS,EAAhB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMI,wBAAwB,GAAG7B,WAAW,CAAC,MAAM;AACjD,UAAM8B,aAAa,GAAGtB,KAAK,CAACa,MAAN,CAAcC,IAAD,IAAU,CAACA,IAAI,CAACS,SAA7B,CAAtB;AACA,WAAOD,aAAa,CAACN,MAAd,KAAyB,CAAhC;AACD,GAH2C,EAGzC,CAAChB,KAAD,CAHyC,CAA5C;AAKA,QAAMwB,QAAQ,GAAGhC,WAAW,CAAC,MAAM;AACjCa,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAM,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAc,IAAAA,UAAU,CAAC,MAAM;AACfhB,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAF,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD,KAHS,EAGP,GAHO,CAAV;AAKAkB,IAAAA,UAAU,CAAC,MAAM;AACfR,MAAAA,SAAS;AACV,KAFS,EAEP,GAFO,CAAV;AAIA,UAAMS,gBAAgB,GAAGL,wBAAwB,EAAjD;;AACA,QAAIK,gBAAJ,EAAsB;AACpB,aAAO3B,KAAK,CAAC4B,QAAN,EAAP;AACD;AACF,GAjB2B,EAiBzB,CACDtB,UADC,EAEDI,eAFC,EAGDF,cAHC,EAIDU,SAJC,EAKDlB,KALC,EAMDsB,wBANC,CAjByB,CAA5B;;AA0BA,QAAMO,iBAAiB,GAAIC,MAAD,IAAY;AACpC,QAAIvB,WAAW,IAAIA,WAAW,CAACwB,EAAZ,KAAmBD,MAAtC,EAA8C;AAC5C,aAAO,KAAP;AACD;;AAED,QAAI3B,aAAa,IAAI,CAArB,EAAwB;AACtB,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAVD;;AAYA,QAAM6B,YAAY,GAAIC,UAAD,IAAgB;AACnC,QAAIA,UAAJ,EAAgB;AACdP,MAAAA,UAAU,CAAC,MAAM;AACftB,QAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACAM,QAAAA,eAAe,CAAC,IAAD,CAAf;AACA,eAAOJ,UAAU,CAAC,IAAD,CAAjB;AACD,OAJS,EAIP,IAJO,CAAV;AAKD;;AAED,QAAI,CAAC2B,UAAL,EAAiB;AACfP,MAAAA,UAAU,CAAC,MAAM;AACfd,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,QAAAA,eAAe,CAAC,IAAD,CAAf;AACD,OAHS,EAGP,IAHO,CAAV;AAID;AACF,GAfD;;AAiBA,QAAMwB,aAAa,GAAIjC,KAAD,IAAW;AAC/B,QAAIE,aAAa,KAAK,CAAtB,EAAyB;AACvB;AACD;;AAED,QAAIA,aAAa,KAAK,CAAtB,EAAyB;AACvB,YAAMgC,YAAY,GAAGlC,KAAK,CAACa,MAAN,CAClBC,IAAD,IAAUA,IAAI,CAACM,QAAL,IAAiB,CAACN,IAAI,CAACC,SADd,CAArB;AAIA,YAAMiB,UAAU,GAAGE,YAAY,CAAC,CAAD,CAAZ,CAAgBC,MAAhB,KAA2BD,YAAY,CAAC,CAAD,CAAZ,CAAgBC,MAA9D;;AAEA,UAAIH,UAAJ,EAAgB;AACd,aAAK,MAAMlB,IAAX,IAAmBoB,YAAnB,EAAiC;AAC/BpB,UAAAA,IAAI,CAACC,SAAL,GAAiB,IAAjB;AACD;AACF;;AAEDgB,MAAAA,YAAY,CAACC,UAAD,CAAZ;AACD;AACF,GApBD;;AAsBA,QAAMI,WAAW,GAAIC,aAAD,IAAmB;AACrC,UAAMnB,YAAY,GAAG,CAAC,GAAGlB,KAAJ,CAArB;AACA,UAAMsC,iBAAiB,GAAGpB,YAAY,CAACqB,SAAb,CACvBzB,IAAD,IAAUA,IAAI,CAACgB,EAAL,KAAYO,aADE,CAA1B;AAGA,UAAMG,YAAY,GAAGtB,YAAY,CAACoB,iBAAD,CAAjC;AACAE,IAAAA,YAAY,CAACpB,QAAb,GAAwB,IAAxB;AACAF,IAAAA,YAAY,CAACoB,iBAAD,CAAZ,GAAkCE,YAAlC;AAEA,WAAOtB,YAAP;AACD,GAVD;;AAYA,QAAMuB,gBAAgB,GAAIZ,MAAD,IAAY;AACnCa,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,UAAMC,gBAAgB,GAAGhB,iBAAiB,CAACC,MAAD,CAA1C;;AACA,QAAI,CAACe,gBAAL,EAAuB;AACrB;AACD;;AAEDzC,IAAAA,gBAAgB,CAAE0C,iBAAD,IAAuBA,iBAAiB,GAAG,CAA5C,CAAhB;AACA9C,IAAAA,KAAK,CAAC+C,aAAN;AACAvC,IAAAA,cAAc,CAACP,KAAK,CAAC+C,IAAN,CAAYjC,IAAD,IAAUA,IAAI,CAACgB,EAAL,KAAYD,MAAjC,CAAD,CAAd;AAEA,UAAMX,YAAY,GAAGkB,WAAW,CAACP,MAAD,CAAhC;AACA5B,IAAAA,QAAQ,CAACiB,YAAD,CAAR;AAEAe,IAAAA,aAAa,CAACf,YAAD,CAAb;AACD,GAfD;;AAiBA,QAAM8B,aAAa,GAAGhD,KAAK,CAACmB,GAAN,CAAWL,IAAD,IAAU;AACxC,wBACE,QAAC,UAAD;AACE,MAAA,IAAI,EAAEA,IADR;AAGE,MAAA,YAAY,EAAE2B,gBAHhB;AAIE,MAAA,QAAQ,EAAEvC,aAAa,IAAI,CAJ7B;AAKE,MAAA,KAAK,EAAEF;AALT,OAEOc,IAAI,CAACgB,EAFZ;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAVqB,CAAtB;;AAYA,MAAI,CAAC/B,KAAK,CAACkD,IAAX,EAAiB;AACf,WAAO,IAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAEpD,OAAO,CAACqD,WAAxB;AAAA,eACG,CAACnD,KAAK,CAACoD,MAAP,IAAiBH,aADpB,eAEE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAExC;AAAhB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AACE,MAAA,IAAI,EAAEJ,OADR;AAEE,MAAA,IAAI,EAAEE,WAFR;AAGE,MAAA,UAAU,EAAEF,OAHd;AAIE,MAAA,OAAO,EAAEoB,QAJX;AAKE,MAAA,aAAa,EAAEZ;AALjB;AAAA;AAAA;AAAA;AAAA,YAHF,EAUGF,SAAS,iBAAI,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEc;AAAtB;AAAA;AAAA;AAAA;AAAA,YAVhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA1KD;;GAAM1B,M;;KAAAA,M;AA4KN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nimport MemoryCard from '../../components/MemoryCard/MemoryCard';\r\nimport Backdrop from '../../components/Backdrop/Backdrop';\r\nimport OpenCard from '../../components/OpenCard/OpenCard';\r\nimport NoMatchCard from '../../components/NoMatchCard/NoMatchCard';\r\n\r\nimport classes from './Memory.module.css';\r\n\r\nconst Memory = (props) => {\r\n  const [cards, setCards] = useState(props.cards);\r\n  const [revealedCards, setRevealedCards] = useState(0);\r\n  const [isMatch, setIsMatch] = useState();\r\n  const [focusedCard, setFocusedCard] = useState();\r\n  const [showBackdrop, setShowBackdrop] = useState();\r\n  const [isNoMatch, setIsNoMatch] = useState();\r\n\r\n  // const { isOver, finish } = props;\r\n\r\n  let allPairsFound = cards.filter((card) => !card.pairFound).length === 0;\r\n\r\n  useEffect(() => {}, [cards]);\r\n\r\n  const cardCover = useCallback(() => {\r\n    setRevealedCards(0);\r\n    const updatedCards = cards.map((card) => {\r\n      return {\r\n        ...card,\r\n        revealed: card.pairFound,\r\n      };\r\n    });\r\n    setCards(updatedCards);\r\n  }, [cards, setCards, setRevealedCards]);\r\n\r\n  useEffect(() => {\r\n    return cardCover();\r\n  }, []);\r\n\r\n  const validateAllCardsRevealed = useCallback(() => {\r\n    const pairsNotFound = cards.filter((card) => !card.pairfound);\r\n    return pairsNotFound.length === 0;\r\n  }, [cards]);\r\n\r\n  const blurCard = useCallback(() => {\r\n    setIsMatch(false);\r\n    setIsNoMatch(false);\r\n\r\n    setTimeout(() => {\r\n      setShowBackdrop(false);\r\n      setFocusedCard(null);\r\n    }, 500);\r\n\r\n    setTimeout(() => {\r\n      cardCover();\r\n    }, 400);\r\n\r\n    const allCardsRevealed = validateAllCardsRevealed();\r\n    if (allCardsRevealed) {\r\n      return props.onFinish();\r\n    }\r\n  }, [\r\n    setIsMatch,\r\n    setShowBackdrop,\r\n    setFocusedCard,\r\n    cardCover,\r\n    props,\r\n    validateAllCardsRevealed,\r\n  ]);\r\n\r\n  const validateCardClick = (cardId) => {\r\n    if (focusedCard && focusedCard.id === cardId) {\r\n      return false;\r\n    }\r\n\r\n    if (revealedCards >= 2) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const showFeedback = (cardsMatch) => {\r\n    if (cardsMatch) {\r\n      setTimeout(() => {\r\n        setRevealedCards(0);\r\n        setShowBackdrop(true);\r\n        return setIsMatch(true);\r\n      }, 1000);\r\n    }\r\n\r\n    if (!cardsMatch) {\r\n      setTimeout(() => {\r\n        setIsNoMatch(true);\r\n        setShowBackdrop(true);\r\n      }, 1400);\r\n    }\r\n  };\r\n\r\n  const checkForMatch = (cards) => {\r\n    if (revealedCards === 0) {\r\n      return;\r\n    }\r\n\r\n    if (revealedCards === 1) {\r\n      const visibleCards = cards.filter(\r\n        (card) => card.revealed && !card.pairFound\r\n      );\r\n\r\n      const cardsMatch = visibleCards[0].pairId === visibleCards[1].pairId;\r\n\r\n      if (cardsMatch) {\r\n        for (const card of visibleCards) {\r\n          card.pairFound = true;\r\n        }\r\n      }\r\n\r\n      showFeedback(cardsMatch);\r\n    }\r\n  };\r\n\r\n  const updateCards = (clickedCardId) => {\r\n    const updatedCards = [...cards];\r\n    const selectedCardIndex = updatedCards.findIndex(\r\n      (card) => card.id === clickedCardId\r\n    );\r\n    const selectedCard = updatedCards[selectedCardIndex];\r\n    selectedCard.revealed = true;\r\n    updatedCards[selectedCardIndex] = selectedCard;\r\n\r\n    return updatedCards;\r\n  };\r\n\r\n  const cardClickHandler = (cardId) => {\r\n    console.log('I run - memory page');\r\n    const isValidCardClick = validateCardClick(cardId);\r\n    if (!isValidCardClick) {\r\n      return;\r\n    }\r\n\r\n    setRevealedCards((prevRevealedCards) => prevRevealedCards + 1);\r\n    props.increaseCount();\r\n    setFocusedCard(cards.find((card) => card.id === cardId));\r\n\r\n    const updatedCards = updateCards(cardId);\r\n    setCards(updatedCards);\r\n\r\n    checkForMatch(updatedCards);\r\n  };\r\n\r\n  const renderedCards = cards.map((card) => {\r\n    return (\r\n      <MemoryCard\r\n        card={card}\r\n        key={card.id}\r\n        clickHandler={cardClickHandler}\r\n        disabled={revealedCards >= 2}\r\n        cards={cards}\r\n      />\r\n    );\r\n  });\r\n\r\n  if (!props.show) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.memorycards}>\r\n      {!props.isOver && renderedCards}\r\n      <Backdrop show={showBackdrop} />\r\n      <OpenCard\r\n        show={isMatch}\r\n        card={focusedCard}\r\n        cardsMatch={isMatch}\r\n        onClose={blurCard}\r\n        allPairsFound={allPairsFound}\r\n      />\r\n      {isNoMatch && <NoMatchCard onClose={blurCard} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Memory;\r\n"]},"metadata":{},"sourceType":"module"}