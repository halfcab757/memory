{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Martin\\\\R_2021\\\\memory\\\\src\\\\pages\\\\Memory\\\\Memory.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MemoryCard from '../../components/MemoryCard/MemoryCard';\nimport Backdrop from '../../components/Backdrop/Backdrop';\nimport OpenCard from '../../components/OpenCard/OpenCard';\nimport NoMatchCard from '../../components/NoMatchCard/NoMatchCard';\nimport classes from './Memory.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Memory = props => {\n  _s();\n\n  const [cards, setCards] = useState(props.cards);\n  const [revealedCards, setRevealedCards] = useState(0);\n  const [isMatch, setIsMatch] = useState(false);\n  const [focusedCard, setFocusedCard] = useState();\n  const [showBackdrop, setShowBackdrop] = useState();\n  const {\n    isOver,\n    finish\n  } = props; //   HÃ¤h?\n\n  useEffect(() => {}, [cards]);\n  useEffect(() => {\n    return cardCover();\n  }, []);\n  const cardCover = useCallback(() => {\n    setRevealedCards(0);\n    const updatedCards = cards.map(card => {\n      return { ...card,\n        revealed: card.pairFound\n      };\n    });\n    setCards(updatedCards);\n  }, [cards, setCards, setRevealedCards]);\n  const blurCard = useCallback(() => {\n    console.log('blurCard');\n    setIsMatch(false);\n    setTimeout(() => {\n      setShowBackdrop(false);\n      setFocusedCard(null);\n    }, 500);\n\n    if (revealedCards > 1) {\n      // checking if all pairs are found\n      setTimeout(() => {\n        cardCover();\n      }, 2500);\n    }\n\n    if (cards.filter(card => !card.pairFound).length === 0) {\n      return props.onFinish();\n    }\n  }, [revealedCards, cards, isOver, finish, setIsMatch, setShowBackdrop, setFocusedCard, cardCover]); //   useEffect(() => {\n  //       console.log('useEffect blurs card');\n  //     if (!props.isOver && revealedCards === 2) {\n  //         console.log('useEffect really blurs card');\n  //       blurCard();\n  //     }\n  //   }, [revealedCards, props.isOver, blurCard]);\n\n  const cardClickHandler = cardId => {\n    console.log('cardClickHandler');\n\n    if (focusedCard && focusedCard.id === cardId) {\n      console.log('clicked the same card again.');\n      return;\n    }\n\n    if (revealedCards >= 2) {\n      return;\n    }\n\n    setRevealedCards(prevRevealedCards => prevRevealedCards + 1);\n    props.increaseCount();\n    setFocusedCard(cards.find(card => card.id === cardId));\n    const updatedCards = [...cards];\n    const selectedCardIndex = updatedCards.findIndex(card => card.id === cardId);\n    const selectedCard = updatedCards[selectedCardIndex];\n    selectedCard.revealed = true;\n    updatedCards[selectedCardIndex] = selectedCard;\n    setCards(updatedCards); // checking both revealed cards for pairing\n\n    if (revealedCards === 1) {\n      const visibleCards = updatedCards.filter(card => card.revealed && !card.pairFound);\n\n      if (visibleCards[0].pairId === visibleCards[1].pairId) {\n        console.log('is match');\n\n        for (const card of visibleCards) {\n          card.pairFound = true;\n        }\n\n        setRevealedCards(0);\n        setShowBackdrop(true);\n        return setIsMatch(true);\n      }\n\n      console.log('is not a match');\n    }\n  };\n\n  const renderedCards = cards.map(card => {\n    return /*#__PURE__*/_jsxDEV(MemoryCard, {\n      card: card,\n      clickHandler: cardClickHandler,\n      disabled: revealedCards >= 2,\n      cards: cards\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this);\n  });\n\n  if (!props.show) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.memorycards,\n    children: [!props.isOver && renderedCards, /*#__PURE__*/_jsxDEV(Backdrop, {\n      show: showBackdrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OpenCard, {\n      show: isMatch,\n      card: focusedCard,\n      cardsMatch: isMatch,\n      onClose: blurCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), revealedCards === 2 && !isMatch && /*#__PURE__*/_jsxDEV(NoMatchCard, {\n      onClose: blurCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 44\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Memory, \"LjFxyycllohLXb3+NbNH/I3pc00=\");\n\n_c = Memory;\nexport default Memory;\n\nvar _c;\n\n$RefreshReg$(_c, \"Memory\");","map":{"version":3,"sources":["C:/Users/Martin/R_2021/memory/src/pages/Memory/Memory.js"],"names":["React","useState","useEffect","useCallback","MemoryCard","Backdrop","OpenCard","NoMatchCard","classes","Memory","props","cards","setCards","revealedCards","setRevealedCards","isMatch","setIsMatch","focusedCard","setFocusedCard","showBackdrop","setShowBackdrop","isOver","finish","cardCover","updatedCards","map","card","revealed","pairFound","blurCard","console","log","setTimeout","filter","length","onFinish","cardClickHandler","cardId","id","prevRevealedCards","increaseCount","find","selectedCardIndex","findIndex","selectedCard","visibleCards","pairId","renderedCards","show","memorycards"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nimport MemoryCard from '../../components/MemoryCard/MemoryCard';\r\nimport Backdrop from '../../components/Backdrop/Backdrop';\r\nimport OpenCard from '../../components/OpenCard/OpenCard';\r\nimport NoMatchCard from '../../components/NoMatchCard/NoMatchCard';\r\n\r\nimport classes from './Memory.module.css';\r\n\r\nconst Memory = (props) => {\r\n  const [cards, setCards] = useState(props.cards);\r\n  const [revealedCards, setRevealedCards] = useState(0);\r\n  const [isMatch, setIsMatch] = useState(false);\r\n  const [focusedCard, setFocusedCard] = useState();\r\n  const [showBackdrop, setShowBackdrop] = useState();\r\n\r\n  const { isOver, finish } = props;\r\n\r\n//   HÃ¤h?\r\n  useEffect(() => {}, [cards]);\r\n\r\n  useEffect(() => {\r\n    return cardCover();\r\n  }, []);\r\n\r\n  const cardCover = useCallback(() => {\r\n    setRevealedCards(0);\r\n    const updatedCards = cards.map((card) => {\r\n      return {\r\n        ...card,\r\n        revealed: card.pairFound,\r\n      };\r\n    });\r\n    setCards(updatedCards);\r\n  }, [cards, setCards, setRevealedCards]);\r\n\r\n  const blurCard = useCallback(() => {\r\n      console.log('blurCard');\r\n    setIsMatch(false);\r\n\r\n    setTimeout(() => {\r\n      setShowBackdrop(false);\r\n      setFocusedCard(null);\r\n    }, 500);\r\n    if (revealedCards > 1) {\r\n      // checking if all pairs are found\r\n      setTimeout(() => {\r\n        cardCover();\r\n      }, 2500);\r\n    }\r\n    if (cards.filter((card) => !card.pairFound).length === 0) {\r\n      return props.onFinish();\r\n    }\r\n  }, [\r\n    revealedCards,\r\n    cards,\r\n    isOver,\r\n    finish,\r\n    setIsMatch,\r\n    setShowBackdrop,\r\n    setFocusedCard,\r\n    cardCover,\r\n  ]);\r\n\r\n//   useEffect(() => {\r\n//       console.log('useEffect blurs card');\r\n//     if (!props.isOver && revealedCards === 2) {\r\n//         console.log('useEffect really blurs card');\r\n//       blurCard();\r\n//     }\r\n//   }, [revealedCards, props.isOver, blurCard]);\r\n\r\n  const cardClickHandler = (cardId) => {\r\n      console.log('cardClickHandler');\r\n    if (focusedCard && focusedCard.id === cardId) {\r\n      console.log('clicked the same card again.');\r\n      return;\r\n    }\r\n    if (revealedCards >= 2) {\r\n      return;\r\n    }\r\n    setRevealedCards((prevRevealedCards) => prevRevealedCards + 1);\r\n    props.increaseCount();\r\n\r\n    setFocusedCard(cards.find((card) => card.id === cardId));\r\n    const updatedCards = [...cards];\r\n    const selectedCardIndex = updatedCards.findIndex(\r\n      (card) => card.id === cardId\r\n    );\r\n    const selectedCard = updatedCards[selectedCardIndex];\r\n    selectedCard.revealed = true;\r\n    updatedCards[selectedCardIndex] = selectedCard;\r\n\r\n    setCards(updatedCards);\r\n\r\n    // checking both revealed cards for pairing\r\n\r\n    if (revealedCards === 1) {\r\n      const visibleCards = updatedCards.filter(\r\n        (card) => card.revealed && !card.pairFound\r\n      );\r\n      if (visibleCards[0].pairId === visibleCards[1].pairId) {\r\n          console.log('is match');\r\n        for (const card of visibleCards) {\r\n          card.pairFound = true;\r\n        }\r\n        setRevealedCards(0);\r\n        setShowBackdrop(true);\r\n        return setIsMatch(true);\r\n      }\r\n      console.log('is not a match');\r\n    }\r\n  };\r\n\r\n  const renderedCards = cards.map((card) => {\r\n    return (\r\n      <MemoryCard\r\n        card={card}\r\n        key={card.id}\r\n        clickHandler={cardClickHandler}\r\n        disabled={revealedCards >= 2}\r\n        cards={cards}\r\n      />\r\n    );\r\n  });\r\n\r\n  if (!props.show) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.memorycards}>\r\n      {!props.isOver && renderedCards}\r\n      <Backdrop show={showBackdrop} />\r\n      <OpenCard\r\n        show={isMatch}\r\n        card={focusedCard}\r\n        cardsMatch={isMatch}\r\n        onClose={blurCard}\r\n      />\r\n      {revealedCards === 2 && !isMatch &&  <NoMatchCard onClose={blurCard}/>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Memory;\r\n"]},"metadata":{},"sourceType":"module"}