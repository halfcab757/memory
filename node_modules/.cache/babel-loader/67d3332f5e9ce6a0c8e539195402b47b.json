{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Martin\\\\R_2021\\\\memory\\\\src\\\\components\\\\MemoryCards\\\\MemoryCards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { memcards } from '../../data/Cards';\nimport MemoryCard from '../MemoryCard/MemoryCard';\nimport Modal from '../Modal/Modal';\nimport classes from './MemoryCards.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction shuffle(array) {\n  let n = array.length - 1;\n\n  for (let i = n; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nconst MemoryCards = () => {\n  _s();\n\n  const [cards, setCards] = useState(shuffle(memcards));\n  const [counter, setCounter] = useState(0);\n  const [revealedCards, setRevealedCards] = useState(0);\n  const [isOver, setIsOver] = useState(false);\n  const [isMatch, setIsMatch] = useState(false);\n\n  function switchOneCard() {\n    const newArrangedCards = cards;\n    let randomIndexOne = Math.floor(Math.random() * 11);\n    let randomIndexTwo = Math.floor(Math.random() * 11);\n\n    if (randomIndexOne === randomIndexTwo || newArrangedCards[randomIndexOne].title === newArrangedCards[randomIndexTwo].title) {\n      randomIndexTwo = Math.floor(Math.random() * 11);\n    }\n\n    const changedCard = newArrangedCards.splice(randomIndexOne, 1);\n    newArrangedCards.splice(randomIndexTwo, 0, changedCard[0]);\n    setCards(newArrangedCards);\n  }\n\n  const cardCover = () => {\n    const updatedCards = cards.map(card => {\n      return { ...card,\n        revealed: card.pairFound\n      };\n    });\n    setCards(updatedCards);\n    setRevealedCards(0);\n  };\n\n  const cardClickHandler = cardId => {\n    if (revealedCards >= 2) {\n      return;\n    }\n\n    setCounter(prevCounter => prevCounter++);\n    setRevealedCards(prevRevealedCards => prevRevealedCards + 1);\n    const selectedCardIndex = cards.findIndex(card => card.id === cardId);\n    const selectedCard = cards[selectedCardIndex];\n    selectedCard.revealed = true;\n    const updatedCards = [...cards];\n    updatedCards[selectedCardIndex] = selectedCard;\n    setCards(updatedCards);\n    setCounter(prevCounter => prevCounter + 1); // checking both revealed cards for pairing\n\n    if (revealedCards === 1) {\n      const visibleCards = updatedCards.filter(card => card.revealed && !card.pairFound);\n      console.log('visible cards:', visibleCards);\n\n      if (visibleCards[0].pairId === visibleCards[1].pairId) {\n        for (const card of visibleCards) {\n          card.pairFound = true;\n        }\n\n        setRevealedCards(0);\n\n        if (updatedCards.filter(card => !card.pairFound).length === 0) {\n          return setIsOver(true);\n        }\n\n        return setIsMatch(true);\n      }\n    }\n\n    if (revealedCards === 1) {\n      // checking if all pairs are found\n      console.log('setting timeout');\n      setTimeout(() => {\n        cardCover();\n      }, 1000);\n    }\n  };\n\n  function reset() {\n    const updatedCards = cards.map(card => {\n      return { ...card,\n        pairFound: false,\n        revealed: false\n      };\n    });\n    setCards(updatedCards);\n    setIsMatch(false);\n    setIsOver(false);\n    setCounter(0);\n  }\n\n  function closeModal() {\n    setIsMatch(false);\n  }\n\n  const renderedCards = cards.map(card => {\n    return /*#__PURE__*/_jsxDEV(MemoryCard, {\n      card: card,\n      clickHandler: cardClickHandler,\n      enabled: !revealedCards >= 2\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.MemoryCards,\n    children: [!isMatch && /*#__PURE__*/_jsxDEV(Modal, {\n      closeModal: () => setIsMatch(false),\n      children: \"Yeah! You got a match!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 30\n    }, this), isOver && /*#__PURE__*/_jsxDEV(Modal, {\n      closeModal: () => reset(),\n      children: [\"You won with only \", counter, \" tries!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 28\n    }, this), !isOver && renderedCards]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 13\n  }, this);\n};\n\n_s(MemoryCards, \"cUtv8Ll7El0ASaIZem5vTzh731E=\");\n\n_c = MemoryCards;\nexport default MemoryCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryCards\");","map":{"version":3,"sources":["C:/Users/Martin/R_2021/memory/src/components/MemoryCards/MemoryCards.js"],"names":["React","useState","memcards","MemoryCard","Modal","classes","shuffle","array","n","length","i","j","Math","floor","random","temp","MemoryCards","cards","setCards","counter","setCounter","revealedCards","setRevealedCards","isOver","setIsOver","isMatch","setIsMatch","switchOneCard","newArrangedCards","randomIndexOne","randomIndexTwo","title","changedCard","splice","cardCover","updatedCards","map","card","revealed","pairFound","cardClickHandler","cardId","prevCounter","prevRevealedCards","selectedCardIndex","findIndex","id","selectedCard","visibleCards","filter","console","log","pairId","setTimeout","reset","closeModal","renderedCards"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport { memcards } from '../../data/Cards';\r\n\r\nimport MemoryCard from '../MemoryCard/MemoryCard';\r\nimport Modal from '../Modal/Modal';\r\n\r\nimport classes from './MemoryCards.module.css';\r\n\r\nfunction shuffle(array) {\r\n    let n = array.length -1;\r\n    for(let i = n; i > 0; i--){\r\n        const j = Math.floor(Math.random() * i)\r\n        const temp = array[i]\r\n        array[i] = array[j]\r\n        array[j] = temp;\r\n      }\r\n    return array;\r\n}\r\n\r\nconst MemoryCards = () => {\r\n\r\n    const [cards, setCards] = useState(shuffle(memcards));\r\n    const [counter, setCounter] = useState(0);\r\n    const [revealedCards, setRevealedCards] = useState(0);\r\n    const [isOver, setIsOver] = useState(false);\r\n    const [isMatch, setIsMatch] = useState(false);\r\n\r\n    function switchOneCard() {\r\n        const newArrangedCards = cards;\r\n        let randomIndexOne = Math.floor((Math.random() * 11));\r\n        let randomIndexTwo = Math.floor((Math.random() * 11));\r\n        if(randomIndexOne === randomIndexTwo\r\n            || newArrangedCards[randomIndexOne].title === newArrangedCards[randomIndexTwo].title) {\r\n                randomIndexTwo = Math.floor(Math.random() * 11);\r\n            }\r\n        const changedCard = newArrangedCards.splice(randomIndexOne, 1);\r\n        newArrangedCards.splice(randomIndexTwo, 0, changedCard[0]);\r\n        setCards(newArrangedCards);\r\n    \r\n    }\r\n\r\n    const cardCover = () => {\r\n        const updatedCards = cards\r\n            .map(card => {\r\n                return {\r\n                    ...card,\r\n                    revealed: card.pairFound\r\n                }\r\n            });\r\n        setCards(updatedCards);\r\n        setRevealedCards(0);\r\n    }\r\n\r\n    const cardClickHandler = (cardId) => {\r\n        if(revealedCards >= 2) {\r\n            return;\r\n        }\r\n        setCounter(prevCounter => prevCounter++);\r\n        setRevealedCards(prevRevealedCards => prevRevealedCards + 1);\r\n        const selectedCardIndex = cards.findIndex(card => card.id === cardId);\r\n        const selectedCard = cards[selectedCardIndex];\r\n        selectedCard.revealed = true;\r\n        const updatedCards = [...cards];\r\n        updatedCards[selectedCardIndex] = selectedCard;\r\n        setCards(updatedCards);\r\n        \r\n        setCounter(prevCounter => prevCounter + 1);\r\n\r\n        // checking both revealed cards for pairing\r\n\r\n        if(revealedCards === 1) {\r\n            const visibleCards = updatedCards.filter(card => card.revealed && !card.pairFound);\r\n            console.log('visible cards:', visibleCards);\r\n            if(visibleCards[0].pairId === visibleCards[1].pairId) {\r\n                for(const card of visibleCards) {\r\n                    card.pairFound = true;\r\n                }\r\n                setRevealedCards(0);\r\n                if(updatedCards.filter(card => !card.pairFound).length === 0) {\r\n                   return setIsOver(true);\r\n                }\r\n                return setIsMatch(true);\r\n            }\r\n        }\r\n\r\n        if(revealedCards === 1) {\r\n            // checking if all pairs are found\r\n            console.log('setting timeout');\r\n            setTimeout(() => {\r\n                cardCover();\r\n                }, 1000);\r\n            }\r\n        }\r\n\r\n    function reset() {\r\n        const updatedCards = cards.map(card => {\r\n            return {\r\n                ...card,\r\n                pairFound: false,\r\n                revealed: false\r\n            };\r\n        })\r\n        setCards(updatedCards);\r\n        setIsMatch(false);\r\n        setIsOver(false);\r\n        setCounter(0);\r\n    }\r\n\r\n    function closeModal() {\r\n        setIsMatch(false);\r\n    }\r\n\r\n    const renderedCards = cards.map(card => {\r\n        return <MemoryCard \r\n            card={card} \r\n            key={card.id}\r\n            clickHandler={cardClickHandler}\r\n            enabled={!revealedCards >= 2}\r\n            />;\r\n    });\r\n\r\n    return (\r\n            <div className={classes.MemoryCards}>\r\n                {!isMatch && <Modal closeModal={() => setIsMatch(false)}>Yeah! You got a match!</Modal>}\r\n                {isOver && <Modal closeModal={() => reset()}>You won with only {counter} tries!</Modal>}\r\n                {!isOver && renderedCards}\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default MemoryCards;"]},"metadata":{},"sourceType":"module"}