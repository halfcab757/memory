{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Martin\\\\R_2021\\\\memory\\\\src\\\\components\\\\MemoryCards\\\\MemoryCards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { memcards } from '../../data/Cards';\nimport MemoryCard from '../MemoryCard/MemoryCard';\nimport Backdrop from '../Backdrop/Backdrop';\nimport OpenCard from '../OpenCard/OpenCard';\nimport classes from './MemoryCards.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction shuffle(array) {\n  let n = array.length - 1;\n\n  for (let i = n; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n}\n\nconst MemoryCards = props => {\n  _s();\n\n  console.log('rerendering memory cards');\n  console.log('props.cards: ', props.cards);\n  const copiedCards = props.cards.slice();\n  const shuffledCards = shuffle(copiedCards);\n  const [cards, setCards] = useState(props.cards);\n  const [revealedCards, setRevealedCards] = useState(0); // const [isOver, setIsOver] = useState(false);\n\n  const [isMatch, setIsMatch] = useState(false);\n  const [focusedCard, setFocusedCard] = useState();\n  const [cardIsClicked, setCardIsClicked] = useState();\n  const [showBackdrop, setShowBackdrop] = useState();\n  const {\n    isOver,\n    finish\n  } = props;\n  useEffect(() => {\n    console.log('CARDS: ', cards);\n  }, [cards]);\n  const cardCover = useCallback(() => {\n    console.log('CARDS GET COVERED');\n    setRevealedCards(0);\n    const updatedCards = cards.map(card => {\n      return { ...card,\n        revealed: card.pairFound\n      };\n    });\n    setCards(updatedCards);\n  }, [cards, setCards, setRevealedCards]);\n  useEffect(() => {\n    'use effect to clean up / unreveal cards';\n\n    return cardCover();\n  }, []);\n  const blurCard = useCallback(() => {\n    setIsMatch(false);\n    setCardIsClicked(false);\n    setTimeout(() => {\n      setShowBackdrop(false);\n      setFocusedCard(null);\n    }, 500);\n\n    if (revealedCards > 1) {\n      // checking if all pairs are found\n      setTimeout(() => {\n        cardCover();\n      }, 1200);\n    }\n\n    if (cards.filter(card => !card.pairFound).length === 0) {\n      return props.onFinish();\n    }\n  }, [revealedCards, cards, isOver, finish, setCardIsClicked, setIsMatch, setShowBackdrop, setFocusedCard, cardCover]);\n  useEffect(() => {\n    if (!props.isOver && revealedCards === 2) {\n      console.log('use effect to blur runs');\n      blurCard();\n    }\n  }, [revealedCards, props.isOver, blurCard]);\n\n  const cardClickHandler = cardId => {\n    if (revealedCards >= 2) {\n      return;\n    }\n\n    setRevealedCards(prevRevealedCards => prevRevealedCards + 1);\n    props.increaseCount();\n    setCardIsClicked(true);\n    setFocusedCard(cards.find(card => card.id === cardId));\n    const updatedCards = [...cards];\n    console.log('cards in cards', cards);\n    console.log('updated cards', updatedCards);\n    const selectedCardIndex = updatedCards.findIndex(card => card.id === cardId);\n    console.log('selected card index', selectedCardIndex);\n    const selectedCard = updatedCards[selectedCardIndex];\n    selectedCard.revealed = true;\n    updatedCards[selectedCardIndex] = selectedCard;\n    setCards(updatedCards); // checking both revealed cards for pairing\n\n    if (revealedCards === 1) {\n      console.log('inside if block', revealedCards);\n      const visibleCards = updatedCards.filter(card => card.revealed && !card.pairFound);\n\n      if (visibleCards[0].pairId === visibleCards[1].pairId) {\n        for (const card of visibleCards) {\n          card.pairFound = true;\n        }\n\n        setRevealedCards(0);\n        setShowBackdrop(true);\n        return setIsMatch(true);\n      }\n    }\n  };\n\n  const renderedCards = cards.map(card => {\n    return /*#__PURE__*/_jsxDEV(MemoryCard, {\n      card: card,\n      clickHandler: cardClickHandler,\n      disabled: revealedCards >= 2,\n      cards: cards\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.MemoryCards,\n    children: [!props.isOver && renderedCards, /*#__PURE__*/_jsxDEV(Backdrop, {\n      show: showBackdrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(OpenCard, {\n      show: isMatch,\n      card: focusedCard,\n      cardsMatch: isMatch,\n      onClose: blurCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 13\n  }, this);\n};\n\n_s(MemoryCards, \"a2btdotoNpBUxWO+pS/vAbQwH+k=\");\n\n_c = MemoryCards;\nexport default MemoryCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryCards\");","map":{"version":3,"sources":["C:/Users/Martin/R_2021/memory/src/components/MemoryCards/MemoryCards.js"],"names":["React","useState","useEffect","useCallback","memcards","MemoryCard","Backdrop","OpenCard","classes","shuffle","array","n","length","i","j","Math","floor","random","temp","MemoryCards","props","console","log","cards","copiedCards","slice","shuffledCards","setCards","revealedCards","setRevealedCards","isMatch","setIsMatch","focusedCard","setFocusedCard","cardIsClicked","setCardIsClicked","showBackdrop","setShowBackdrop","isOver","finish","cardCover","updatedCards","map","card","revealed","pairFound","blurCard","setTimeout","filter","onFinish","cardClickHandler","cardId","prevRevealedCards","increaseCount","find","id","selectedCardIndex","findIndex","selectedCard","visibleCards","pairId","renderedCards"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AAEA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,OAAOC,OAAP,MAAoB,0BAApB;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,MAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAc,CAAtB;;AACA,OAAI,IAAIC,CAAC,GAAGF,CAAZ,EAAeE,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB,UAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,CAA3B,CAAV;AACA,UAAMK,IAAI,GAAGR,KAAK,CAACG,CAAD,CAAlB;AACAH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAWH,KAAK,CAACI,CAAD,CAAhB;AACAJ,IAAAA,KAAK,CAACI,CAAD,CAAL,GAAWI,IAAX;AACD;;AACH,SAAOR,KAAP;AACH;;AAED,MAAMS,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAE3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,KAAK,CAACG,KAAnC;AAEA,QAAMC,WAAW,GAAGJ,KAAK,CAACG,KAAN,CAAYE,KAAZ,EAApB;AACA,QAAMC,aAAa,GAAGjB,OAAO,CAACe,WAAD,CAA7B;AAEA,QAAM,CAACD,KAAD,EAAQI,QAAR,IAAoB1B,QAAQ,CAACmB,KAAK,CAACG,KAAP,CAAlC;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoC5B,QAAQ,CAAC,CAAD,CAAlD,CAT2B,CAU3B;;AACA,QAAM,CAAC6B,OAAD,EAAUC,UAAV,IAAwB9B,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAAC+B,WAAD,EAAcC,cAAd,IAAgChC,QAAQ,EAA9C;AACA,QAAM,CAACiC,aAAD,EAAgBC,gBAAhB,IAAoClC,QAAQ,EAAlD;AACA,QAAM,CAACmC,YAAD,EAAeC,eAAf,IAAkCpC,QAAQ,EAAhD;AAEA,QAAM;AAAEqC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBnB,KAA3B;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBC,KAAvB;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,QAAMiB,SAAS,GAAGrC,WAAW,CAAC,MAAM;AAChCkB,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAO,IAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACA,UAAMY,YAAY,GAAGlB,KAAK,CACzBmB,GADoB,CAChBC,IAAI,IAAI;AACT,aAAO,EACH,GAAGA,IADA;AAEHC,QAAAA,QAAQ,EAAED,IAAI,CAACE;AAFZ,OAAP;AAIH,KANoB,CAArB;AAOAlB,IAAAA,QAAQ,CAACc,YAAD,CAAR;AACH,GAX4B,EAW1B,CAAClB,KAAD,EAAQI,QAAR,EAAkBE,gBAAlB,CAX0B,CAA7B;AAaA3B,EAAAA,SAAS,CAAC,MAAM;AACZ;;AAEA,WAAOsC,SAAS,EAAhB;AACH,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAMM,QAAQ,GAAG3C,WAAW,CAAC,MAAM;AAC3B4B,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAI,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAY,IAAAA,UAAU,CAAC,MAAM;AACbV,MAAAA,eAAe,CAAC,KAAD,CAAf;AACAJ,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAHS,EAGP,GAHO,CAAV;;AAIA,QAAGL,aAAa,GAAG,CAAnB,EAAsB;AAClB;AACAmB,MAAAA,UAAU,CAAC,MAAM;AACbP,QAAAA,SAAS;AACR,OAFK,EAEH,IAFG,CAAV;AAGC;;AACD,QAAGjB,KAAK,CAACyB,MAAN,CAAaL,IAAI,IAAI,CAACA,IAAI,CAACE,SAA3B,EAAsCjC,MAAtC,KAAiD,CAApD,EAAuD;AACnD,aAAOQ,KAAK,CAAC6B,QAAN,EAAP;AACF;AACT,GAhBuB,EAgBrB,CAACrB,aAAD,EAAgBL,KAAhB,EAAuBe,MAAvB,EAA+BC,MAA/B,EAAuCJ,gBAAvC,EAAyDJ,UAAzD,EAAqEM,eAArE,EAAsFJ,cAAtF,EAAsGO,SAAtG,CAhBqB,CAA5B;AAkBAtC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACkB,KAAK,CAACkB,MAAP,IAAiBV,aAAa,KAAK,CAAtC,EAAyC;AACrCP,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAwB,MAAAA,QAAQ;AACX;AACJ,GALQ,EAKN,CAAClB,aAAD,EAAgBR,KAAK,CAACkB,MAAtB,EAA8BQ,QAA9B,CALM,CAAT;;AAOA,QAAMI,gBAAgB,GAAIC,MAAD,IAAY;AACjC,QAAGvB,aAAa,IAAI,CAApB,EAAuB;AACnB;AACH;;AACDC,IAAAA,gBAAgB,CAACuB,iBAAiB,IAAIA,iBAAiB,GAAG,CAA1C,CAAhB;AACAhC,IAAAA,KAAK,CAACiC,aAAN;AACAlB,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AAEAF,IAAAA,cAAc,CAACV,KAAK,CAAC+B,IAAN,CAAWX,IAAI,IAAIA,IAAI,CAACY,EAAL,KAAYJ,MAA/B,CAAD,CAAd;AACA,UAAMV,YAAY,GAAG,CAAC,GAAGlB,KAAJ,CAArB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BC,KAA9B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BmB,YAA7B;AACA,UAAMe,iBAAiB,GAAGf,YAAY,CAACgB,SAAb,CAAuBd,IAAI,IAAIA,IAAI,CAACY,EAAL,KAAYJ,MAA3C,CAA1B;AACA9B,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCkC,iBAAnC;AACA,UAAME,YAAY,GAAGjB,YAAY,CAACe,iBAAD,CAAjC;AACAE,IAAAA,YAAY,CAACd,QAAb,GAAwB,IAAxB;AACAH,IAAAA,YAAY,CAACe,iBAAD,CAAZ,GAAkCE,YAAlC;AAEA/B,IAAAA,QAAQ,CAACc,YAAD,CAAR,CAlBiC,CAoBjC;;AAEA,QAAGb,aAAa,KAAK,CAArB,EAAwB;AACpBP,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BM,aAA/B;AACA,YAAM+B,YAAY,GAAGlB,YAAY,CAACO,MAAb,CAAoBL,IAAI,IAAIA,IAAI,CAACC,QAAL,IAAiB,CAACD,IAAI,CAACE,SAAnD,CAArB;;AACA,UAAGc,YAAY,CAAC,CAAD,CAAZ,CAAgBC,MAAhB,KAA2BD,YAAY,CAAC,CAAD,CAAZ,CAAgBC,MAA9C,EAAsD;AAClD,aAAI,MAAMjB,IAAV,IAAkBgB,YAAlB,EAAgC;AAC5BhB,UAAAA,IAAI,CAACE,SAAL,GAAiB,IAAjB;AACH;;AACDhB,QAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACAQ,QAAAA,eAAe,CAAC,IAAD,CAAf;AACA,eAAON,UAAU,CAAC,IAAD,CAAjB;AACC;AACJ;AACJ,GAlCL;;AAoCA,QAAM8B,aAAa,GAAGtC,KAAK,CAACmB,GAAN,CAAUC,IAAI,IAAI;AACpC,wBAAO,QAAC,UAAD;AACH,MAAA,IAAI,EAAEA,IADH;AAGH,MAAA,YAAY,EAAEO,gBAHX;AAIH,MAAA,QAAQ,EAAEtB,aAAa,IAAI,CAJxB;AAKH,MAAA,KAAK,EAAEL;AALJ,OAEEoB,IAAI,CAACY,EAFP;AAAA;AAAA;AAAA;AAAA,YAAP;AAOH,GARqB,CAAtB;AAUA,sBACQ;AAAK,IAAA,SAAS,EAAE/C,OAAO,CAACW,WAAxB;AAAA,eACK,CAACC,KAAK,CAACkB,MAAP,IAAiBuB,aADtB,eAEQ,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEzB;AAAhB;AAAA;AAAA;AAAA;AAAA,YAFR,eAGQ,QAAC,QAAD;AACI,MAAA,IAAI,EAAEN,OADV;AAEI,MAAA,IAAI,EAAEE,WAFV;AAGI,MAAA,UAAU,EAAEF,OAHhB;AAII,MAAA,OAAO,EAAEgB;AAJb;AAAA;AAAA;AAAA;AAAA,YAHR;AAAA;AAAA;AAAA;AAAA;AAAA,UADR;AAWH,CA3HD;;GAAM3B,W;;KAAAA,W;AA6HN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nimport { memcards } from '../../data/Cards';\r\n\r\nimport MemoryCard from '../MemoryCard/MemoryCard';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport OpenCard from '../OpenCard/OpenCard';\r\n\r\nimport classes from './MemoryCards.module.css';\r\n\r\nfunction shuffle(array) {\r\n    let n = array.length -1;\r\n    for(let i = n; i > 0; i--){\r\n        const j = Math.floor(Math.random() * i)\r\n        const temp = array[i]\r\n        array[i] = array[j]\r\n        array[j] = temp;\r\n      }\r\n    return array;\r\n}\r\n\r\nconst MemoryCards = (props) => {\r\n\r\n    console.log('rerendering memory cards');\r\n    console.log('props.cards: ', props.cards);\r\n\r\n    const copiedCards = props.cards.slice();\r\n    const shuffledCards = shuffle(copiedCards);\r\n\r\n    const [cards, setCards] = useState(props.cards);\r\n    const [revealedCards, setRevealedCards] = useState(0);\r\n    // const [isOver, setIsOver] = useState(false);\r\n    const [isMatch, setIsMatch] = useState(false);\r\n    const [focusedCard, setFocusedCard] = useState();\r\n    const [cardIsClicked, setCardIsClicked] = useState();\r\n    const [showBackdrop, setShowBackdrop] = useState();\r\n\r\n    const { isOver, finish } = props;\r\n\r\n    useEffect(() => {\r\n        console.log('CARDS: ', cards);\r\n    }, [cards]);\r\n\r\n    const cardCover = useCallback(() => {\r\n        console.log('CARDS GET COVERED');\r\n        setRevealedCards(0);\r\n        const updatedCards = cards\r\n        .map(card => {\r\n            return {\r\n                ...card,\r\n                revealed: card.pairFound\r\n            }\r\n        });\r\n        setCards(updatedCards);\r\n    }, [cards, setCards, setRevealedCards]);\r\n\r\n    useEffect(() => {\r\n        'use effect to clean up / unreveal cards';\r\n  \r\n        return cardCover();\r\n    }, []); \r\n\r\n    const blurCard = useCallback(() => {\r\n            setIsMatch(false);\r\n            setCardIsClicked(false);\r\n            setTimeout(() => {\r\n                setShowBackdrop(false);\r\n                setFocusedCard(null);\r\n            }, 500);\r\n            if(revealedCards > 1) {\r\n                // checking if all pairs are found\r\n                setTimeout(() => {\r\n                    cardCover();\r\n                    }, 1200);\r\n                }\r\n                if(cards.filter(card => !card.pairFound).length === 0) {\r\n                    return props.onFinish();\r\n                 }\r\n        }, [revealedCards, cards, isOver, finish, setCardIsClicked, setIsMatch, setShowBackdrop, setFocusedCard, cardCover]); \r\n\r\n    useEffect(() => {\r\n        if(!props.isOver && revealedCards === 2) {\r\n            console.log('use effect to blur runs');\r\n            blurCard();\r\n        }\r\n    }, [revealedCards, props.isOver, blurCard]);\r\n\r\n    const cardClickHandler = (cardId) => {\r\n        if(revealedCards >= 2) {\r\n            return;\r\n        }\r\n        setRevealedCards(prevRevealedCards => prevRevealedCards + 1);\r\n        props.increaseCount();\r\n        setCardIsClicked(true);\r\n        \r\n        setFocusedCard(cards.find(card => card.id === cardId));\r\n        const updatedCards = [...cards];\r\n        console.log('cards in cards', cards);\r\n        console.log('updated cards', updatedCards);\r\n        const selectedCardIndex = updatedCards.findIndex(card => card.id === cardId);\r\n        console.log('selected card index', selectedCardIndex);\r\n        const selectedCard = updatedCards[selectedCardIndex];\r\n        selectedCard.revealed = true;     \r\n        updatedCards[selectedCardIndex] = selectedCard;\r\n        \r\n        setCards(updatedCards);\r\n\r\n        // checking both revealed cards for pairing\r\n        \r\n        if(revealedCards === 1) {\r\n            console.log('inside if block', revealedCards);\r\n            const visibleCards = updatedCards.filter(card => card.revealed && !card.pairFound);\r\n            if(visibleCards[0].pairId === visibleCards[1].pairId) {\r\n                for(const card of visibleCards) {\r\n                    card.pairFound = true;\r\n                }\r\n                setRevealedCards(0);\r\n                setShowBackdrop(true);\r\n                return setIsMatch(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    const renderedCards = cards.map(card => {\r\n        return <MemoryCard \r\n            card={card} \r\n            key={card.id}\r\n            clickHandler={cardClickHandler}\r\n            disabled={revealedCards >= 2}\r\n            cards={cards}\r\n            />;\r\n    });\r\n\r\n    return (\r\n            <div className={classes.MemoryCards}>\r\n                {!props.isOver && renderedCards}\r\n                    <Backdrop show={showBackdrop} />\r\n                    <OpenCard \r\n                        show={isMatch}\r\n                        card={focusedCard}\r\n                        cardsMatch={isMatch}\r\n                        onClose={blurCard}/>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default MemoryCards;"]},"metadata":{},"sourceType":"module"}