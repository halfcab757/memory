{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Martin\\\\R_2021\\\\memory\\\\src\\\\components\\\\MemoryCards\\\\MemoryCards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MemoryCard from '../MemoryCard/MemoryCard';\nimport Backdrop from '../Backdrop/Backdrop';\nimport OpenCard from '../OpenCard/OpenCard';\nimport classes from './MemoryCards.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MemoryCards = props => {\n  _s();\n\n  const [cards, setCards] = useState(props.cards);\n  const [revealedCards, setRevealedCards] = useState(0);\n  const [isMatch, setIsMatch] = useState(false);\n  const [focusedCard, setFocusedCard] = useState();\n  const [showBackdrop, setShowBackdrop] = useState();\n  const {\n    isOver,\n    finish\n  } = props;\n  useEffect(() => {}, [cards]);\n  useEffect(() => {\n    return cardCover();\n  }, []);\n  const cardCover = useCallback(() => {\n    setRevealedCards(0);\n    const updatedCards = cards.map(card => {\n      return { ...card,\n        revealed: card.pairFound\n      };\n    });\n    setCards(updatedCards);\n  }, [cards, setCards, setRevealedCards]);\n  const blurCard = useCallback(() => {\n    setIsMatch(false); // setCardIsClicked(false);\n\n    setTimeout(() => {\n      setShowBackdrop(false);\n      setFocusedCard(null);\n    }, 500);\n\n    if (revealedCards > 1) {\n      // checking if all pairs are found\n      setTimeout(() => {\n        cardCover();\n      }, 2500);\n    }\n\n    if (cards.filter(card => !card.pairFound).length === 0) {\n      return props.onFinish();\n    }\n  }, [revealedCards, cards, isOver, finish, setIsMatch, setShowBackdrop, setFocusedCard, cardCover]);\n  useEffect(() => {\n    if (!props.isOver && revealedCards === 2) {\n      blurCard();\n    }\n  }, [revealedCards, props.isOver, blurCard]);\n\n  const cardClickHandler = cardId => {\n    if (focusedCard && focusedCard.id === cardId) {\n      console.log('clicked the same card again.');\n      return;\n    }\n\n    if (revealedCards >= 2) {\n      return;\n    }\n\n    setRevealedCards(prevRevealedCards => prevRevealedCards + 1);\n    props.increaseCount(); // setCardIsClicked(true);\n\n    setFocusedCard(cards.find(card => card.id === cardId));\n    const updatedCards = [...cards];\n    const selectedCardIndex = updatedCards.findIndex(card => card.id === cardId);\n    const selectedCard = updatedCards[selectedCardIndex];\n    selectedCard.revealed = true;\n    updatedCards[selectedCardIndex] = selectedCard;\n    setCards(updatedCards); // checking both revealed cards for pairing\n\n    if (revealedCards === 1) {\n      const visibleCards = updatedCards.filter(card => card.revealed && !card.pairFound);\n\n      if (visibleCards[0].pairId === visibleCards[1].pairId) {\n        for (const card of visibleCards) {\n          card.pairFound = true;\n        }\n\n        setRevealedCards(0);\n        setShowBackdrop(true);\n        return setIsMatch(true);\n      }\n    }\n  };\n\n  const renderedCards = cards.map(card => {\n    return /*#__PURE__*/_jsxDEV(MemoryCard, {\n      card: card,\n      clickHandler: cardClickHandler,\n      disabled: revealedCards >= 2,\n      cards: cards\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 16\n    }, this);\n  });\n\n  if (!props.show) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.memorycards,\n    children: [!props.isOver && renderedCards, /*#__PURE__*/_jsxDEV(Backdrop, {\n      show: showBackdrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(OpenCard, {\n      show: isMatch,\n      card: focusedCard,\n      cardsMatch: isMatch,\n      onClose: blurCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 13\n  }, this);\n};\n\n_s(MemoryCards, \"E53SQwp9pwdXCrxZhnrk2Bmd3mo=\");\n\n_c = MemoryCards;\nexport default MemoryCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryCards\");","map":{"version":3,"sources":["C:/Users/Martin/R_2021/memory/src/components/MemoryCards/MemoryCards.js"],"names":["React","useState","useEffect","useCallback","MemoryCard","Backdrop","OpenCard","classes","MemoryCards","props","cards","setCards","revealedCards","setRevealedCards","isMatch","setIsMatch","focusedCard","setFocusedCard","showBackdrop","setShowBackdrop","isOver","finish","cardCover","updatedCards","map","card","revealed","pairFound","blurCard","setTimeout","filter","length","onFinish","cardClickHandler","cardId","id","console","log","prevRevealedCards","increaseCount","find","selectedCardIndex","findIndex","selectedCard","visibleCards","pairId","renderedCards","show","memorycards"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\n\r\nimport MemoryCard from '../MemoryCard/MemoryCard';\r\nimport Backdrop from '../Backdrop/Backdrop';\r\nimport OpenCard from '../OpenCard/OpenCard';\r\n\r\nimport classes from './MemoryCards.module.css';\r\n\r\nconst MemoryCards = (props) => {\r\n    \r\n    const [cards, setCards] = useState(props.cards);\r\n    const [revealedCards, setRevealedCards] = useState(0);\r\n    const [isMatch, setIsMatch] = useState(false);\r\n    const [focusedCard, setFocusedCard] = useState();\r\n    const [showBackdrop, setShowBackdrop] = useState();\r\n\r\n    const { isOver, finish } = props;\r\n\r\n\r\n    useEffect(() => {\r\n    }, [cards]);\r\n\r\n    useEffect(() => {\r\n        return cardCover();\r\n    }, []); \r\n\r\n    const cardCover = useCallback(() => {\r\n        setRevealedCards(0);\r\n        const updatedCards = cards\r\n        .map(card => {\r\n            return {\r\n                ...card,\r\n                revealed: card.pairFound\r\n            }\r\n        });\r\n        setCards(updatedCards);\r\n    }, [cards, setCards, setRevealedCards]);\r\n\r\n\r\n\r\n    const blurCard = useCallback(() => {\r\n            setIsMatch(false);\r\n            // setCardIsClicked(false);\r\n            setTimeout(() => {\r\n                setShowBackdrop(false);\r\n                setFocusedCard(null);\r\n            }, 500);\r\n            if(revealedCards > 1) {\r\n                // checking if all pairs are found\r\n                setTimeout(() => {\r\n                    cardCover();\r\n                    }, 2500);\r\n                }\r\n                if(cards.filter(card => !card.pairFound).length === 0) {\r\n                    return props.onFinish();\r\n                 }\r\n        }, [revealedCards, cards, isOver, finish, setIsMatch, setShowBackdrop, setFocusedCard, cardCover]); \r\n\r\n    useEffect(() => {\r\n        if(!props.isOver && revealedCards === 2) {\r\n            blurCard();\r\n        }\r\n    }, [revealedCards, props.isOver, blurCard]);\r\n\r\n    const cardClickHandler = (cardId) => {\r\n        if (focusedCard && focusedCard.id === cardId) {\r\n            console.log('clicked the same card again.');\r\n            return;\r\n        }\r\n        if(revealedCards >= 2) {\r\n            return;\r\n        }\r\n        setRevealedCards(prevRevealedCards => prevRevealedCards + 1);\r\n        props.increaseCount();\r\n        // setCardIsClicked(true);\r\n        \r\n        setFocusedCard(cards.find(card => card.id === cardId));\r\n        const updatedCards = [...cards];\r\n        const selectedCardIndex = updatedCards.findIndex(card => card.id === cardId);\r\n        const selectedCard = updatedCards[selectedCardIndex];\r\n        selectedCard.revealed = true;     \r\n        updatedCards[selectedCardIndex] = selectedCard;\r\n        \r\n        setCards(updatedCards);\r\n\r\n        // checking both revealed cards for pairing\r\n        \r\n        if(revealedCards === 1) {\r\n            const visibleCards = updatedCards.filter(card => card.revealed && !card.pairFound);\r\n            if(visibleCards[0].pairId === visibleCards[1].pairId) {\r\n                for(const card of visibleCards) {\r\n                    card.pairFound = true;\r\n                }\r\n                setRevealedCards(0);\r\n                setShowBackdrop(true);\r\n                return setIsMatch(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    const renderedCards = cards.map(card => {\r\n        return <MemoryCard \r\n            card={card} \r\n            key={card.id}\r\n            clickHandler={cardClickHandler}\r\n            disabled={revealedCards >= 2}\r\n            cards={cards}\r\n            />;\r\n    });\r\n\r\n    if(!props.show) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n            <div className={classes.memorycards}>\r\n                {!props.isOver && renderedCards}\r\n                    <Backdrop show={showBackdrop} />\r\n                    <OpenCard \r\n                        show={isMatch}\r\n                        card={focusedCard}\r\n                        cardsMatch={isMatch}\r\n                        onClose={blurCard}/>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default MemoryCards;"]},"metadata":{},"sourceType":"module"}