{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Martin\\\\R_2021\\\\memory\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Memory from './pages/Memory/Memory';\nimport Start from './pages/Start/Start';\nimport Final from './pages/Final/Final';\nimport Navigation from './components/Layout/Navigation/Navigation';\nimport About from './pages/About/About';\nimport { rockCards, metalCards, popCards } from './data/Cards';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [started, setStarted] = useState(); // isOver default Ã¤ndern\n\n  const [isOver, setIsOver] = useState(); // set counter to zero\n\n  const [counter, setCounter] = useState(3);\n  const [mode, setMode] = useState();\n  const [showAbout, setShowAbout] = useState(false);\n  const [memoryCards, setMemoryCards] = useState();\n\n  function shuffle(array) {\n    let n = array.length - 1;\n\n    for (let i = n; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    return array;\n  }\n\n  function reset() {\n    setStarted(false);\n    setIsOver(false);\n    setCounter(0);\n    setMode();\n    setMemoryCards(null);\n  }\n\n  function startGameHandler(style) {\n    let cards;\n\n    if (style === 'ROCK') {\n      cards = rockCards.map(card => {\n        return { ...card,\n          revealed: false\n        };\n      });\n    }\n\n    if (style === 'METAL') {\n      cards = metalCards.map(card => {\n        return { ...card,\n          revealed: false\n        };\n      });\n    }\n\n    if (style === 'POP') {\n      cards = popCards.map(card => {\n        return { ...card,\n          revealed: false\n        };\n      });\n    }\n\n    setMemoryCards(shuffle(cards));\n    setIsOver(false);\n    setStarted(true);\n  }\n\n  function finishGame() {\n    setIsOver(true);\n  }\n\n  function increaseCounter() {\n    setCounter(prevCounter => prevCounter + 1);\n  }\n\n  function selectModeHandler(mode) {\n    setMode(mode);\n  } // function showAboutHandler() {\n  //   setShowAbout(true);\n  // }\n  // function closeAboutHandler() {\n  //   setShowAbout(false);\n  // }\n\n\n  function toggleShowAboutHandler() {\n    setShowAbout(prevState => !prevState);\n  }\n\n  function closeAboutAndResetHandler() {\n    setShowAbout(false);\n    reset();\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      count: counter,\n      activeMode: mode,\n      onSelectMode: selectModeHandler,\n      onShowAbout: toggleShowAboutHandler,\n      onShowStart: closeAboutAndResetHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [!started && !showAbout && /*#__PURE__*/_jsxDEV(Start, {\n        onStart: startGameHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 36\n      }, this), started && !isOver && /*#__PURE__*/_jsxDEV(Memory, {\n        show: !showAbout,\n        cards: memoryCards,\n        increaseCount: increaseCounter,\n        onFinish: finishGame,\n        isOver: isOver,\n        count: counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Final, {\n        show: isOver && !showAbout,\n        onStart: startGameHandler,\n        counter: counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), showAbout && /*#__PURE__*/_jsxDEV(About, {\n      gameIsRunning: started,\n      onCloseAbout: toggleShowAboutHandler,\n      onCloseAboutAndReset: closeAboutAndResetHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"0b8DAxnJy0i5C45spbwv5Tdy7ZU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Martin/R_2021/memory/src/App.js"],"names":["React","useState","Memory","Start","Final","Navigation","About","rockCards","metalCards","popCards","App","started","setStarted","isOver","setIsOver","counter","setCounter","mode","setMode","showAbout","setShowAbout","memoryCards","setMemoryCards","shuffle","array","n","length","i","j","Math","floor","random","temp","reset","startGameHandler","style","cards","map","card","revealed","finishGame","increaseCounter","prevCounter","selectModeHandler","toggleShowAboutHandler","prevState","closeAboutAndResetHandler"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport Memory from './pages/Memory/Memory';\nimport Start from './pages/Start/Start';\nimport Final from './pages/Final/Final';\nimport Navigation from './components/Layout/Navigation/Navigation';\nimport About from './pages/About/About';\n\nimport { rockCards, metalCards, popCards } from './data/Cards';\n\nimport './App.css';\n\nfunction App() {\n  const [started, setStarted] = useState();\n  // isOver default Ã¤ndern\n  const [isOver, setIsOver] = useState();\n  // set counter to zero\n  const [counter, setCounter] = useState(3);\n  const [mode, setMode] = useState();\n  const [showAbout, setShowAbout] = useState(false);\n  const [memoryCards, setMemoryCards] = useState();\n\n  function shuffle(array) {\n    let n = array.length - 1;\n    for (let i = n; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  function reset() {\n    setStarted(false);\n    setIsOver(false);\n    setCounter(0);\n    setMode();\n    setMemoryCards(null);\n  }\n\n  function startGameHandler(style) {\n    let cards;\n    if (style === 'ROCK') {\n      cards = rockCards.map((card) => {\n        return {\n          ...card,\n          revealed: false,\n        };\n      });\n    }\n    if (style === 'METAL') {\n      cards = metalCards.map((card) => {\n        return {\n          ...card,\n          revealed: false,\n        };\n      });\n    }\n    if (style === 'POP') {\n      cards = popCards.map((card) => {\n        return {\n          ...card,\n          revealed: false,\n        };\n      });\n    }\n    setMemoryCards(shuffle(cards));\n    setIsOver(false);\n    setStarted(true);\n  }\n\n  function finishGame() {\n    setIsOver(true);\n  }\n\n  function increaseCounter() {\n    setCounter((prevCounter) => prevCounter + 1);\n  }\n\n  function selectModeHandler(mode) {\n    setMode(mode);\n  }\n\n  // function showAboutHandler() {\n  //   setShowAbout(true);\n  // }\n\n  // function closeAboutHandler() {\n  //   setShowAbout(false);\n  // }\n\n  function toggleShowAboutHandler() {\n    setShowAbout(prevState => !prevState);\n  }\n\n  function closeAboutAndResetHandler() {\n    setShowAbout(false);\n    reset();\n  }\n\n  return (\n    <React.Fragment>\n      <Navigation\n        count={counter}\n        activeMode={mode}\n        onSelectMode={selectModeHandler}\n        onShowAbout={toggleShowAboutHandler}\n        onShowStart={closeAboutAndResetHandler}\n      />\n      <div className=\"App\">\n        {!started && !showAbout && <Start onStart={startGameHandler} />}\n        {started && !isOver && (\n          <Memory\n            show={!showAbout}\n            cards={memoryCards}\n            increaseCount={increaseCounter}\n            onFinish={finishGame}\n            isOver={isOver}\n            count={counter}\n          />\n        )}\n        <Final\n          show={isOver && !showAbout}\n          onStart={startGameHandler}\n          counter={counter}\n        />\n      </div>\n      {showAbout && (\n        <About\n          gameIsRunning={started}\n          onCloseAbout={toggleShowAboutHandler}\n          onCloseAboutAndReset={closeAboutAndResetHandler}\n        />\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}