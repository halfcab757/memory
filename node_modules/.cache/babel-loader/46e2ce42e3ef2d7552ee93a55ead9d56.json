{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Martin\\\\R_2021\\\\memory\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Suspense } from 'react';\nimport Start from './pages/Start/Start';\nimport Navigation from './components/Layout/Navigation/Navigation';\nimport { rockCards, metalCards, popCards } from './data/Cards';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Memory = /*#__PURE__*/React.lazy(_c = () => import('./pages/Memory/Memory'));\n_c2 = Memory;\nconst Final = /*#__PURE__*/React.lazy(_c3 = () => import('./pages/Final/Final'));\n_c4 = Final;\nconst About = /*#__PURE__*/React.lazy(_c5 = () => import('./pages/About/About'));\n_c6 = About;\n\nfunction App() {\n  _s();\n\n  const [started, setStarted] = useState();\n  const [isOver, setIsOver] = useState();\n  const [counter, setCounter] = useState(3);\n  const [mode, setMode] = useState();\n  const [showAbout, setShowAbout] = useState(false);\n  const [memoryCards, setMemoryCards] = useState();\n  const [showWelcome, setShowWelcome] = useState(true);\n\n  function closeWelcomeHandler() {\n    setShowWelcome(false);\n  }\n\n  function shuffle(array) {\n    let n = array.length - 1;\n\n    for (let i = n; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    return array;\n  }\n\n  function reset() {\n    setStarted(false);\n    setIsOver(false);\n    setCounter(0);\n    setMode();\n    setMemoryCards(null);\n  }\n\n  function startGameHandler(style) {\n    const cards = getCards(style);\n    setMemoryCards(shuffle(cards));\n    setIsOver(false);\n    setStarted(true);\n  }\n\n  function getCards(musicStyle) {\n    let cards;\n\n    if (musicStyle === 'ROCK') {\n      cards = rockCards.map(card => {\n        return { ...card,\n          revealed: false\n        };\n      });\n    }\n\n    if (musicStyle === 'METAL') {\n      cards = metalCards.map(card => {\n        return { ...card,\n          revealed: false\n        };\n      });\n    }\n\n    if (musicStyle === 'POP') {\n      cards = popCards.map(card => {\n        return { ...card,\n          revealed: false\n        };\n      });\n    }\n\n    return cards;\n  }\n\n  function finishGame() {\n    setIsOver(true);\n  }\n\n  function increaseCounter() {\n    setCounter(prevCounter => prevCounter + 1);\n  }\n\n  function selectModeHandler(mode) {\n    setMode(mode);\n  }\n\n  function toggleShowAboutHandler() {\n    setShowAbout(prevState => !prevState);\n  }\n\n  function closeAboutAndResetHandler() {\n    setShowAbout(false);\n    reset();\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      count: counter,\n      activeMode: mode,\n      onSelectMode: selectModeHandler,\n      onShowAbout: toggleShowAboutHandler,\n      onShowStart: closeAboutAndResetHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 27\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [!started && !showAbout && /*#__PURE__*/_jsxDEV(Start, {\n          onStart: startGameHandler,\n          showWelcome: showWelcome,\n          closeWelcome: closeWelcomeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 36\n        }, this), started && !isOver && /*#__PURE__*/_jsxDEV(Memory, {\n          show: !showAbout,\n          cards: memoryCards,\n          increaseCount: increaseCounter,\n          onFinish: finishGame,\n          isOver: isOver,\n          count: counter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Final, {\n          show: isOver && !showAbout,\n          onStart: startGameHandler,\n          counter: counter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this), showAbout && /*#__PURE__*/_jsxDEV(About, {\n        gameIsRunning: started,\n        onCloseAbout: toggleShowAboutHandler,\n        onCloseAboutAndReset: closeAboutAndResetHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"L356TP94++MrUgexfTWYM1pmzGU=\");\n\n_c7 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Memory$React.lazy\");\n$RefreshReg$(_c2, \"Memory\");\n$RefreshReg$(_c3, \"Final$React.lazy\");\n$RefreshReg$(_c4, \"Final\");\n$RefreshReg$(_c5, \"About$React.lazy\");\n$RefreshReg$(_c6, \"About\");\n$RefreshReg$(_c7, \"App\");","map":{"version":3,"sources":["C:/Users/Martin/R_2021/memory/src/App.js"],"names":["React","useState","Suspense","Start","Navigation","rockCards","metalCards","popCards","Memory","lazy","Final","About","App","started","setStarted","isOver","setIsOver","counter","setCounter","mode","setMode","showAbout","setShowAbout","memoryCards","setMemoryCards","showWelcome","setShowWelcome","closeWelcomeHandler","shuffle","array","n","length","i","j","Math","floor","random","temp","reset","startGameHandler","style","cards","getCards","musicStyle","map","card","revealed","finishGame","increaseCounter","prevCounter","selectModeHandler","toggleShowAboutHandler","prevState","closeAboutAndResetHandler","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, Suspense } from 'react';\n\nimport Start from './pages/Start/Start';\nimport Navigation from './components/Layout/Navigation/Navigation';\n\nimport { rockCards, metalCards, popCards } from './data/Cards';\n\nimport './App.css';\n\nconst Memory = React.lazy(() => import('./pages/Memory/Memory'));\nconst Final = React.lazy(() => import('./pages/Final/Final'));\nconst About = React.lazy(() => import('./pages/About/About'));\n\nfunction App() {\n  const [started, setStarted] = useState();\n  const [isOver, setIsOver] = useState();\n  const [counter, setCounter] = useState(3);\n  const [mode, setMode] = useState();\n  const [showAbout, setShowAbout] = useState(false);\n  const [memoryCards, setMemoryCards] = useState();\n  const [showWelcome, setShowWelcome] = useState(true);\n\n  function closeWelcomeHandler() {\n    setShowWelcome(false);\n}\n\n  function shuffle(array) {\n    let n = array.length - 1;\n    for (let i = n; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n  function reset() {\n    setStarted(false);\n    setIsOver(false);\n    setCounter(0);\n    setMode();\n    setMemoryCards(null);\n  }\n\n  function startGameHandler(style) {\n    const cards = getCards(style);\n    setMemoryCards(shuffle(cards));\n    setIsOver(false);\n    setStarted(true);\n  }\n\n  function getCards(musicStyle) {\n    let cards;\n    if (musicStyle === 'ROCK') {\n      cards = rockCards.map((card) => {\n        return {\n          ...card,\n          revealed: false,\n        };\n      });\n    }\n    if (musicStyle === 'METAL') {\n      cards = metalCards.map((card) => {\n        return {\n          ...card,\n          revealed: false,\n        };\n      });\n    }\n    if (musicStyle === 'POP') {\n      cards = popCards.map((card) => {\n        return {\n          ...card,\n          revealed: false,\n        };\n      });\n    }\n    return cards;\n  }\n\n  function finishGame() {\n    setIsOver(true);\n  }\n\n  function increaseCounter() {\n    setCounter((prevCounter) => prevCounter + 1);\n  }\n\n  function selectModeHandler(mode) {\n    setMode(mode);\n  }\n\n  function toggleShowAboutHandler() {\n    setShowAbout(prevState => !prevState);\n  }\n\n  function closeAboutAndResetHandler() {\n    setShowAbout(false);\n    reset();\n  }\n\n  return (\n    <React.Fragment>\n      <Navigation\n        count={counter}\n        activeMode={mode}\n        onSelectMode={selectModeHandler}\n        onShowAbout={toggleShowAboutHandler}\n        onShowStart={closeAboutAndResetHandler}\n      />\n      <Suspense fallback={<p style={{textAlign: 'center'}}>Loading</p>}>\n      <div className=\"App\">\n        {!started && !showAbout && <Start onStart={startGameHandler} showWelcome={showWelcome} closeWelcome={closeWelcomeHandler}/>}\n        {started && !isOver && (\n          <Memory\n            show={!showAbout}\n            cards={memoryCards}\n            increaseCount={increaseCounter}\n            onFinish={finishGame}\n            isOver={isOver}\n            count={counter}\n          />\n        )}\n        <Final\n          show={isOver && !showAbout}\n          onStart={startGameHandler}\n          counter={counter}\n        />\n      </div>\n      {showAbout && (\n        <About\n          gameIsRunning={started}\n          onCloseAbout={toggleShowAboutHandler}\n          onCloseAboutAndReset={closeAboutAndResetHandler}\n        />\n      )}\n      </Suspense>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}